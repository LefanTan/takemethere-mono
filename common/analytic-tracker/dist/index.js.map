{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/// <reference lib=\"dom\" />\n\n/**\n * Represents a db entry holding information about an analytic record\n */\nexport class AnalyticRecord {\n  // Implicitly creates these fields\n  constructor(\n    public readonly appId: string,\n    public readonly propertyId: string,\n    public readonly eventId: string,\n    public readonly sessionId: string,\n    public readonly userAgent: string,\n    public readonly referrer: string,\n    public readonly eventProperties?: object\n  ) {}\n\n  /**\n   * Human-readable description of the record\n   * @returns\n   */\n  toString() {\n    return `\n        appId - ${this.appId}\n        propertyId - ${this.propertyId}\n        eventId - ${this.eventId}\n        eventProperties - ${this.eventProperties}\n        sessionId - ${this.sessionId}\n        userAgent - ${this.userAgent}\n        referrer - ${this.referrer}\n    `;\n  }\n\n  /**\n   * Data format to be sent to a POST endpoint\n   * @returns\n   */\n  format() {\n    return JSON.stringify(this);\n  }\n}\n\n/**\n * Actual tracker that will be initialized in a browser context.\n */\nexport class AnalyticTracker {\n  private readonly ua: string;\n  private readonly referrer: string;\n  private readonly sessionId: string;\n  private readonly isFirstTime: boolean;\n\n  constructor(\n    public appId: string,\n    public propertyId: string,\n    public readonly endpoint: string\n  ) {\n    // Initialize session\n    this.ua = navigator.userAgent;\n    this.referrer = document.referrer;\n\n    // Check if a cookie exists\n    let sessionCookieValue = document.cookie\n      .split(\"; \")\n      .find((row) => row.startsWith(`${appId}_session=`))\n      ?.split(\"=\")[1];\n\n    if (!sessionCookieValue) {\n      // Set cookie expiry date to be X hour from now\n      // Which means that PageVisit event will only fire once every X hour\n      const expiryDate = new Date();\n      expiryDate.setTime(new Date().getTime() + 1 * 60 * 60 * 1000);\n\n      this.sessionId = crypto.randomUUID();\n\n      document.cookie = `${appId}_session=${\n        this.sessionId\n      }; expires=${expiryDate.toUTCString()}; Secure; SameSite=Strict`;\n\n      this.isFirstTime = true;\n\n      // Fire FirstPageVisit event once\n      this.logAnalytic(\"FirstPageVisit\");\n    } else {\n      this.isFirstTime = false;\n\n      this.sessionId = sessionCookieValue;\n    }\n\n    // Remove cookie on unload\n    window.addEventListener(\"beforeunload\", () => {\n      /**\n       * Fromn w3schools:\n       * You should define the cookie path to ensure that you delete the right cookie.\n       * Some browsers will not let you delete a cookie if you don't specify the path.\n       */\n      document.cookie = `${appId}_session=${this.sessionId}; expires=Thu, 01 Jan 1970 00:00:00 UTC; Secure; SameSite=Strict; path=/`;\n    });\n  }\n\n  /**\n   * Create a post request given the specified data\n   * @param eventId\n   * @param eventProperties\n   */\n  logAnalytic(eventId: string, eventProperties?: object) {\n    const record = new AnalyticRecord(\n      this.appId,\n      this.propertyId,\n      eventId,\n      this.sessionId,\n      this.ua,\n      this.referrer,\n      eventProperties\n    );\n    console.log(\"Sent Analytic: \" + record.toString());\n    navigator.sendBeacon(this.endpoint, record.format());\n  }\n\n  /**\n   * Check if the current session is new (First time user visits this origin)\n   * @returns\n   */\n  isNewSession(): boolean {\n    return this.isFirstTime;\n  }\n}\n"],
  "mappings": "AAKO,IAAMA,EAAN,KAAqB,CAE1B,YACkBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAChB,CAPgB,WAAAN,EACA,gBAAAC,EACA,aAAAC,EACA,eAAAC,EACA,eAAAC,EACA,cAAAC,EACA,qBAAAC,CACf,CAMH,UAAW,CACT,MAAO;AAAA,kBACO,KAAK;AAAA,uBACA,KAAK;AAAA,oBACR,KAAK;AAAA,4BACG,KAAK;AAAA,sBACX,KAAK;AAAA,sBACL,KAAK;AAAA,qBACN,KAAK;AAAA,KAExB,CAMA,QAAS,CACP,OAAO,KAAK,UAAU,IAAI,CAC5B,CACF,EAKaC,EAAN,KAAsB,CAM3B,YACSP,EACAC,EACSO,EAChB,CAHO,WAAAR,EACA,gBAAAC,EACS,cAAAO,EAtDpB,IAAAC,EAyDI,KAAK,GAAK,UAAU,UACpB,KAAK,SAAW,SAAS,SAGzB,IAAIC,GAAqBD,EAAA,SAAS,OAC/B,MAAM,IAAI,EACV,KAAME,GAAQA,EAAI,WAAW,GAAGX,YAAgB,CAAC,IAF3B,YAAAS,EAGrB,MAAM,KAAK,GAEf,GAAKC,EAiBH,KAAK,YAAc,GAEnB,KAAK,UAAYA,MAnBM,CAGvB,IAAME,EAAa,IAAI,KACvBA,EAAW,QAAQ,IAAI,KAAK,EAAE,QAAQ,EAAI,EAAI,GAAK,GAAK,GAAI,EAE5D,KAAK,UAAY,OAAO,WAAW,EAEnC,SAAS,OAAS,GAAGZ,aACnB,KAAK,sBACMY,EAAW,YAAY,6BAEpC,KAAK,YAAc,GAGnB,KAAK,YAAY,gBAAgB,CACnC,CAOA,OAAO,iBAAiB,eAAgB,IAAM,CAM5C,SAAS,OAAS,GAAGZ,aAAiB,KAAK,mFAC7C,CAAC,CACH,CAOA,YAAYE,EAAiBI,EAA0B,CACrD,IAAMO,EAAS,IAAId,EACjB,KAAK,MACL,KAAK,WACLG,EACA,KAAK,UACL,KAAK,GACL,KAAK,SACLI,CACF,EACA,QAAQ,IAAI,kBAAoBO,EAAO,SAAS,CAAC,EACjD,UAAU,WAAW,KAAK,SAAUA,EAAO,OAAO,CAAC,CACrD,CAMA,cAAwB,CACtB,OAAO,KAAK,WACd,CACF",
  "names": ["AnalyticRecord", "appId", "propertyId", "eventId", "sessionId", "userAgent", "referrer", "eventProperties", "AnalyticTracker", "endpoint", "_a", "sessionCookieValue", "row", "expiryDate", "record"]
}
